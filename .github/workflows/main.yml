name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle 캐시 설정
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Docker 빌드 및 Docker Hub에 푸시
    - name: Docker build & push to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

    # EC2에 배포
    - name: Docker image pull & deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # 최신 이미지 Pull
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

          # 기존 컨테이너 중지 및 삭제
          CONTAINER_ID=$(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/docker-test:latest")
          if [ -n "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID && sudo docker rm $CONTAINER_ID
          fi

          # 새 컨테이너 실행 및 .env 파일 적용
          sudo docker run -d --log-driver=syslog --name docker-test -p 8080:8080 \
            --env-file ~/.env \
            ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

          # 실행 중인 컨테이너 확인
          sudo docker ps -a | grep "docker-test"

          # 사용하지 않는 컨테이너 및 이미지 정리
          sudo docker container prune -f
          sudo docker image prune -a -f
